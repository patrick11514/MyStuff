#!/bin/bash
cd $(pwd)

echo "Enter name of project:"
read PROJECT_NAME

PACKAGES=()
DEV_PACKAGES=()

echo "Do you want to use simple-json-db? (y/n)"
read SIMPLE_JSON_DB
if [ $SIMPLE_JSON_DB = "y" ]; then
    PACKAGES+=('"simple-json-db": "^2.0.0"')
fi

echo "Do you want to use mysql? (y/n)"
read MYSQL
if [ $MYSQL = "y" ]; then
    PACKAGES+=('"mariadb": "^3.0.0"')
fi

echo "Do you want to use fetch? (y/n)"
read FETCH
if [ $FETCH = "y" ]; then
    PACKAGES+=('"node-fetch": "^3.3.0"')
fi

echo "Do you want to use CLI COLORS? (y/n)"
read CLI_COLORS
if [ $CLI_COLORS = "y" ]; then
    PACKAGES+=('"cli-color": "^2.0.2"' '"strip-color": "^0.1.0"')
    DEV_PACKAGES+=('"@types/cli-color": "^2.0.2"' '"@types/strip-color": "^0.1.0"')
    mkdir -p src/lib
    curl https://upload.patrick115.eu/.storage/logger.ts -o src/lib/logger.ts
fi

JSON=$(cat <<EOF
{
    "name": "$PROJECT_NAME",
    "version": "1.0.0",
    "description": "",
    "main": "./build/index.js",
    "scripts": {
        "dev": "ts-node-dev --respawn ./src/index.ts",
        "build": "mkdir -p build && tsc -p tsconfig.json",
        "start": "node ./build/index.js",
        "clear": "rm -r build",
        "startCommands": "tsc -p tsconfigCommands.json && node build/registerCommands.js"
    },
    "keywords": [],
    "author": "Patrik MintÄ›l",
    "license": "ISC",
    "dependencies": {
        "@discordjs/builders": "^1.4.0",
        "@discordjs/rest": "^1.5.0",
        "discord-api-types": "^0.37.24",
        "discord.js": "^14.7.1",
        "dotenv": "^16.0.3",
        "fs": "0.0.1-security"
EOF
)

#if packages are not empty add coma to end of line
if [ ${#PACKAGES[@]} -gt 0 ]; then
    JSON+=","
fi

#loop array of packages add comma if not last
for i in "${!PACKAGES[@]}"; do
    if [ $i -eq $((${#PACKAGES[@]} - 1)) ]; then
        JSON+="
        ${PACKAGES[$i]}"
    else
        JSON+="
        ${PACKAGES[$i]},"
    fi
done

#add end of dependencies
JSON+=$(cat <<EOF

    },
    "devDependencies": {
        "@types/node": "^18.11.17",
        "ts-node-dev": "^2.0.0",
        "typescript": "^4.9.4"
EOF
)

#if dev packages are not empty add coma to end of line
if [ ${#DEV_PACKAGES[@]} -gt 0 ]; then
    JSON+=","
fi

#loop array of dev packages add comma if not last
for i in "${!DEV_PACKAGES[@]}"; do
    if [ $i -eq $((${#DEV_PACKAGES[@]} - 1)) ]; then
        JSON+="
        ${DEV_PACKAGES[$i]}"
    else
        JSON+="
        ${DEV_PACKAGES[$i]},"
    fi
done

#add end of dev dependencies
JSON+=$(cat <<EOF

    }
}
EOF
)

# add text to package.json
echo "$JSON" > package.json

#run pnpm install
pnpm install

#make default files
mkdir -p src
mkdir -p src/types
mkdir -p build
git init
DEFAULT_ENV=$(cat <<EOF
DISCORD_ID=
DISCORD_TOKEN=
EOF
)
echo "$DEFAULT_ENV" > .env
DEFAULT_GITIGNORE=$(cat <<EOF
node_modules
build
.env
EOF
)
echo "$DEFAULT_GITIGNORE" > .gitignore
DEFAULT_INDEX=$(cat <<EOF
import {
    Client,
    GatewayIntentBits
} from 'discord.js'
import dotenv from 'dotenv'
dotenv.config()

const intents = []
intents.push(GatewayIntentBits.Guilds)

let client = new Client({
    intents: intents,
})

client.on('ready', async () => {
    console.log(\`Logged in as \${client.user?.tag}!\`)
})

client.login(process.env.DISCORD_TOKEN)
EOF
)
echo "$DEFAULT_INDEX" > src/index.ts
ENVTYPES=$(cat <<EOF
declare global {
    namespace NodeJS {
        interface ProcessEnv {
            DISCORD_ID: string
            DISCORD_TOKEN: string
        }
    }
}
export {}
EOF
)
echo "$ENVTYPES" > src/types/env.d.ts

TSCONFIG=$(cat <<EOF
{
    "compilerOptions": {
        "rootDir": "src",
        "outDir": "build",
        "removeComments": true,
        "target": "ES2022",
        "module": "CommonJS",
        "strict": true,
        "esModuleInterop": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "resolveJsonModule": true,
    },
    "include": [
        "src/**/*"
    ],
    "exclude": [
        "node_modules",
    ]
}
EOF
)
echo "$TSCONFIG" > tsconfig.json

PRETTIER=$(cat <<EOF
{
    "printWidth": 120,
    "semi": false,
    "singleQuote": true,
    "useTabs": false,
    "tabWidth": 4
}
EOF
)
echo "$PRETTIER" > .prettierrc

#default commit
git add .
git commit -m "Initial commit"

#clear screen and write done
clear
echo "Done!"
